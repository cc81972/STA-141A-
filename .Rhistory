## plot(x) for x numeric vector
x <- rnorm(50)
class(x)
plot(x)
# let's generate some data, here a simulated linear model
x <- runif(50,0,10) # runif(n,min,max)
y <- 3 + 2*x + rnorm(50,sd=2)
plot(x,y)
abline(lm(y~x)) # lm() : linear model
# low-level plots add plots to an already existing plot
# here we can add a straight line to our scatter plot using abline()
#
abline(a=3,b=2) # abline(a,b) a=intercept, b=slope
# other plotting arguments available
# can set color of plot by 'col' option
abline(a=3,b=2,col='red')
## time series data
LakeHuron # level, in feet, of Lake Huron
class(LakeHuron) # of class ts
plot(LakeHuron)
plot(as.numeric(LakeHuron),type='l') # same plot, but axis and labels are different
## plot(function)
# the argument here is a function
# the plot() assumes a univariate function x -> f(x)
class(dnorm)
plot(dnorm) # default is to plot from x = [0,1]
plot(dnorm,xlim=c(-3,3)) # can change
## data frame
head(cars) # bivariate dataframe
class(cars)
plot(cars)
#
head(iris)
plot(iris) # multivariate data.frame
pairs(iris) # plot() actually calls pairs() for more than two-columns
?pairs() # matrix of scatterplots
# note that 'Species' is factor but is plotted as numeric() here
plot(iris[,-5]) # without the factor 'Species'
# table
# class = table
class(Titanic)
plot(Titanic) # too many factors here, hard to tell
# four variables here
# can see by
str(Titanic)
margin.table(Titanic,c(1,4)) # Class and Survived
apply(Titanic,c(1,4),sum) # similar output as above
# classes are different
class(margin.table(Titanic,c(1,4)))
class(apply(Titanic,c(1,4),sum))
plot(apply(Titanic,c(1,4),sum)) # not a table
plot(margin.table(Titanic,c(1,4))) # money talks
mosaicplot(margin.table(Titanic,c(1,4))) # what is actually being called
plot(margin.table(Titanic,c(2,4)))
## Factors
mpg<-ggplot2::mpg # dataset from ggplot2
head(mpg)
plot(as.factor(mpg$trans),mpg$displ)  # Really messy, how to fix?
## Conditioning scatter plots
# co-plot
pairs(iris) # we can
coplot(Sepal.Length ~ Petal.Width | Species, data=iris, rows=1)
coplot(Petal.Length ~ Petal.Width | Species, data=iris, rows=1) # notice the separation
# same for mpg data
pairs(formula = ~cty+displ+as.factor(trans),data=mpg )
coplot(mpg$cty~mpg$displ | as.factor( substr(mpg$trans,1,1) ) )
coplot(Sepal.Length ~ Petal.Width | Species, data=iris, rows=1)
coplot(Petal.Length ~ Petal.Width | Species, data=iris, rows=1) # notice the separation
# same for mpg data
pairs(formula = ~cty+displ+as.factor(trans),data=mpg )
coplot(mpg$cty~mpg$displ | as.factor( substr(mpg$trans,1,1) ) )
## more plots
rm(mpg) # need to remove existing mpg object
attach(mtcars) # has column 'mpg'
# The data was extracted from the 1974 Motor Trend US magazine,
# and comprises fuel consumption and 10 aspects of automobile design
# and performance for 32 automobiles (1973â€“74 models).
# other high level plots
# dotchart : alternative to bar plot
dotchart(sort(mtcars$mpg),labels=rownames(mtcars[order(mtcars$mpg),])) # notice sort() and order() here
dotchart(mpg,labels=rownames(mtcars)) # without
barplot(sort(mtcars$mpg),names.arg =rownames(mtcars[order(mtcars$mpg),]),
horiz=TRUE, las=2 ) # need to adjust graphics parameters to fix the cutoff
# histogram
hist(mpg)
# qqplot : quantile plots
qqnorm(mpg)
qqline(mpg)
#boxplot
boxplot(mpg) # of numeric vector
#the whiskers extend to the most extreme data point which is no more than 1.5 times the interquartile range from the box
boxplot(hp)
summary(hp)[5]+1.5*IQR(hp)
max(hp)
detach(mtcars)
# arguments to high-level plotting functions
# check the documentation
?plot # not as helpful
?plot.default # better
?dotchart
?points
?par # can set graphical parameters, or query for the current parameters
plot(x=1:20,y=1:20,
pch=1:20,
xlab='X',
ylab='Y',
main='Title goes here',
sub='the subtitle is down here',
xlim=c(0,21),
ylim=c(0,21)
)
# adjusting the plot before
dotchart(sort(mtcars$mpg),labels=rownames(mtcars[order(mtcars$mpg),]),
xlab="Miles per Gallon",
main="Fuel economy",
pch=20)
# changing the limits.
# normally xlim and ylim are fine for the plot() called
# but you might need to adjust this if you are going to add lower-level plots e.g. lines(), points(), etc.
plot(dnorm,xlim=c(-3,3))
plot(function(x) dnorm(x,sd=.5),
add=T, # add to existing plot()
xlim=c(-3,3)
) # cut-off
# change ylim on *first* plot
plot(dnorm,
xlim=c(-3,3),
ylim=c(0, max(dnorm(0),dnorm(0,sd=.5) ) )
)
plot(function(x) dnorm(x,sd=.5),
add=T, # add to existing plot()
xlim=c(-3,3),
) # better
attach(anscombe) # anscombe's quartet
colors() # huge list of colors available in base R
par(mfrow=c(2,2),bg="grey99",pch=20) # mfrow for multiple plots
plot(anscombe$x1,anscombe$y1,xlab="x1",ylab='y1')
abline(lm(y1~x1))
plot(anscombe$x2,anscombe$y2,xlab="x2",ylab='y2')
abline(lm(y2~x2))
plot(anscombe$x3,anscombe$y3,xlab="x3",ylab='y3')
abline(lm(y3~x3))
plot(anscombe$x4,anscombe$y4,xlab="x4",ylab='y4')
abline(lm(y4~x4))
# note the difference between the last
par(mfcol=c(2,2),bg="grey99",pch=20)
# can you guess how the result will be different?
plot(anscombe$x1,anscombe$y1,xlab="x1",ylab='y1')
abline(lm(y1~x1))
plot(anscombe$x2,anscombe$y2,xlab="x2",ylab='y2')
abline(lm(y2~x2))
plot(anscombe$x3,anscombe$y3,xlab="x3",ylab='y3')
abline(lm(y3~x3))
plot(anscombe$x4,anscombe$y4,xlab="x4",ylab='y4')
abline(lm(y4~x4))
detach(anscombe)
# exporting: saving plots to file
# can use the Rstudio interface
# or can do it manually specifying the graphics device
pdf("lm.pdf")
plot(x,y)
abline(3,2)
# plot(cars) # this would add to another page
dev.off() # closes file, no more plots will be added
# other file types available
jpeg("lm.jpeg",width=7,height=7,units="in",res=227)
plot(x,y)
abline(3,2)
dev.off()
## Exercise ##
set.seed(77)
# Generate data according to
sig=5
x <- runif(50,0,10)
y <- 3 + 2*x + rnorm(50,sd=sig)
# Also, plot the average least squares line over 50 repetitions
# Also, plot the average least squares line over 50 repetitions
# How does it compare to the true line y = 3 + 2*x ?
# Also, plot the average least squares line over 50 repetitions
# How does it compare to the true line y = 3 + 2*x ?
# What happens when you adjust the error variance?
# Also, plot the average least squares line over 50 repetitions
# How does it compare to the true line y = 3 + 2*x ?
# What happens when you adjust the error variance?
# (Hint: we are going to repeat the same steps 50 times. What control
